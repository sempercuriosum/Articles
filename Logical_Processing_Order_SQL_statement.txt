Logical Processing Order of the SELECT statement using T-SQL 

SQL Clause Logical Order of Execution.
1. FROM
2. ON
3. JOIN
4. WHERE
5. GROUP BY
6. HAVING
7. SELECT
8. DISTINCT
9. ORDER BY
10. TOP

SQL Clause Keyed-In Order
1. SELECT
2. DISTINCT
3. TOP
4. FROM
5. JOIN
6. ON
7. WHERE
8. GROUP BY
9. HAVING
10. ORDER BY


* The preceding steps show the logical processing order, or binding order, for a SELECT statement. 
	Note, not all clauses are needed to successfully query for data, those required at minimum are: SELECT [columns] and FROM [table]; Yes. always end your statement with a semi-colon that is the best practice.

* The aforementioned order determines when the objects defined in one step are accessible to the clauses in subsequent steps. For example, during execution a given query has access the tables/ views defined in the FROM clause, these objects and their columns are made available to all subsequent steps. 

* Conversely, because the SELECT clause is step 7, any column aliases or derived columns defined in that clause cannot be referenced by preceding clauses. Meaning, that only the step(s) executed after the SELECT statement will have the ability to see the alias. 

* The actual physical execution of the statement is determined by the query processor and the order may vary from this list. (This is esoteric and not really applicable for my purposes.)

* Think about this as an exponential decline. There is a huge amount of information one starts with; the FROM, ON, and JOIN Clauses get the largest collection of unrefined data. During progression down the logical order data is being filtered out little by little, ending with the SELECT returning the specific data columns we are looking for in the result-set. 

What are the clauses doing??
The data that are returned will be stored in a result table, called the result-set.

1. SELECT: used to select columns from a database table.

2. DISTINCT: used to return only different values, based on the columns listed in the select SELECT statement.

3. TOP: used, in conjunction with SELECT, to limit the number of rows that the result-set will contain to a number; n. eg. TOP 100

4. FROM: used to state what table data will be sourced from.

5. JOIN: combines rows from two or more tables based on a column relations between the tables.

6. ON: used with JOIN to specify the condition(s) the JOIN will occur.

7. WHERE: used to filter rows from the result-set based on one or more conditions.

8. GROUP BY: groups like row values together; used a lot with aggregate SQL functions. 

9. HAVING: very similar to WHERE, but aggregate functions cannot be used with WHERE, HAVING you can.

10. ORDER BY: specifies the order the result-set will appear in, based on one or more columns and their ascending or descending sort order.


Examples!

Basic Syntax for a query

	SELECT column1 as [FirstColumn]
	FROM TableName
	
* generally, one does not want to play "fast and loose" with the data being returned, ie, SELECTing blindly from a table without the use of conditions is not a great idea. 

* COLUMN ALIAS: 'as' and [SomeColumn] represent a COLUMN ALIAS. where 'as' is the keyword (not required but definitely recommended) is used to define an alias name for the column to make the name more presentable, human-readable, actually change the name displayed (albeit not as common), etc. with no spaces [] brackets are not needed, but again recommended, with spaces [] brackets are required. 

Here is the test table definition (test data and table create statement are here: Employees_TestData.sql)
	 
	 TABLE NAME 
		- [Employees]
	 COLUMN LIST and Data Definitions
		- [id] [int]
		- [FirstName] [varchar](50) 
		- [LastName] [varchar](50)
		- [Email] [varchar](50)
		- [Role] [varchar](50) 
		- [HireDate] [date] 
		- [IsActive] [varchar](50) 
		- [YearsSinceHireDate]  AS (datediff(year,[HireDate],getdate()))
			
		-- NOTE the column [YearsSinceHireDate] is a CALCULATED COLUMN, which is a more advanced topic, but still worth knowing exists. 
		This example is using the "datediff" SQL built-in function passing in the parameters of year, the hireDate, and the getDate SQL built-in function to calculate, hence the name, how many years it has been since the employee has been hired.		
		eg, why this is needed, rather than typing the whole function out each time we can save our effort by defining that column to just simply retrieve the data straight away.

The task is to return a list of unique employees hired after 2005 who are still working at the company:

* One approach to this.
	- First, what data do we want to see? 
		-- since this is a report that will contain employees what information should we look for?
		-- how can we describe the employee might be a good first thought.
	- Next, what are the limits we need to impose, ie how can we filter?
		-- looking at our task description above, we can see two things. What are they? what can we use to filter on?
	- Finally, how are we going to present the report? what makes the most sense? 
	
How I would do this.

	SELECT DISTINCT emp.FirstName + ' ' + emp.LastName as [FullName], 
		emp.HireDate as [Hire Date], 
		emp.YearsSinceHireDate as [Years Employed]
	FROM Employees as [emp]
	WHERE IsActive = 1
		and HireDate > '01/01/2005'
	ORDER BY emp.HireDate
	;

Breakdown of what is happening. 

* Clauses being used

	- SELECT 
	- DISTINCT
	- FROM
	- WHERE
	- ORDER BY

* Previously mentioned the 'as' keyword is defining some aliases for columns AND(!) note the table too. 
* SELECT we are taking both the FirstName and the LastName and concatenating the two columns together to make a new value of FullName. This does not have to be done, using the FirstName and the LastName as two columns is perfectly good. a disadvantage here of the concatenation is now, if we wanted to ORDER BY LastName we cannot, so we would need to SELECT the two names as separate columns. 
* FROM simply, where does the data exist? I did not need to JOIN to another table to gain access to other information, but maybe we also want an employee's role in the company and that is stored in a different table. we can JOIN the two together with some condition to get that information too. 
* WHERE clause is saying we are looking for those employees who are active yet at the company as well as those who were hired after the date we were given. 
* ORDER BY we are sorting by the date a given employee was hired starting with the oldest to newest.



